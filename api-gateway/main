To create a backend app using Node.js, Prisma, PostgreSQL, JWT authentication, and CRUD operations, follow these steps:
1. Set up the project

mkdir my-backend-app
cd my-backend-app
npm init -y

Install necessary dependencies:

npm install express prisma @prisma/client jsonwebtoken bcryptjs dotenv
npm install --save-dev typescript @types/node @types/express ts-node

2. Initialize Prisma

npx prisma init

Update .env to configure the PostgreSQL connection:

DATABASE_URL="postgresql://user:password@localhost:5432/mydb?schema=public"

Replace user, password, and mydb with your PostgreSQL credentials.
3. Define Prisma schema

Edit prisma/schema.prisma to define your User model and other models as required:

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

Run the Prisma migration to create the database schema:

npx prisma migrate dev --name init

4. Create Express server

Create the src folder and add an entry point src/index.ts:

import express from "express";
import dotenv from "dotenv";
import { PrismaClient } from "@prisma/client";
import jwt from "jsonwebtoken";
import bcrypt from "bcryptjs";

dotenv.config();

const app = express();
app.use(express.json());

const prisma = new PrismaClient();

// JWT secret
const JWT_SECRET = process.env.JWT_SECRET || "secret";

// Register a user
app.post("/register", async (req, res) => {
  const { email, password, name } = req.body;
  const hashedPassword = await bcrypt.hash(password, 10);

  try {
    const user = await prisma.user.create({
      data: {
        email,
        password: hashedPassword,
        name,
      },
    });
    res.status(201).json({ message: "User registered", user });
  } catch (error) {
    res.status(500).json({ error: "Error registering user" });
  }
});

// Login a user
app.post("/login", async (req, res) => {
  const { email, password } = req.body;

  const user = await prisma.user.findUnique({
    where: { email },
  });

  if (!user) {
    return res.status(404).json({ error: "User not found" });
  }

  const isPasswordValid = await bcrypt.compare(password, user.password);
  if (!isPasswordValid) {
    return res.status(401).json({ error: "Invalid credentials" });
  }

  const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: "1h" });
  res.json({ message: "Login successful", token });
});

// Middleware to protect routes
const authenticate = (req, res, next) => {
  const token = req.headers.authorization?.split(" ")[1];
  if (!token) return res.status(401).json({ error: "No token provided" });

  jwt.verify(token, JWT_SECRET, (err, decoded) => {
    if (err) return res.status(401).json({ error: "Invalid or expired token" });
    req.user = decoded;
    next();
  });
};

// CRUD operations (example: Get users)
app.get("/users", authenticate, async (req, res) => {
  try {
    const users = await prisma.user.findMany();
    res.json(users);
  } catch (error) {
    res.status(500).json({ error: "Error fetching users" });
  }
});

// Update user info
app.put("/users/:id", authenticate, async (req, res) => {
  const { name } = req.body;
  try {
    const updatedUser = await prisma.user.update({
      where: { id: parseInt(req.params.id) },
      data: { name },
    });
    res.json(updatedUser);
  } catch (error) {
    res.status(500).json({ error: "Error updating user" });
  }
});

// Delete a user
app.delete("/users/:id", authenticate, async (req, res) => {
  try {
    await prisma.user.delete({
      where: { id: parseInt(req.params.id) },
    });
    res.json({ message: "User deleted" });
  } catch (error) {
    res.status(500).json({ error: "Error deleting user" });
  }
});

const port = 3000;
app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});

5. Set up TypeScript configuration

Create tsconfig.json:

{
  "compilerOptions": {
    "target": "ES6",
    "module": "commonjs",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "outDir": "./dist"
  },
  "include": ["src/**/*.ts"]
}

6. Run the server

Add the following to package.json to run the server with TypeScript:

"scripts": {
  "dev": "ts-node src/index.ts"
}

Now, run the server:

npm run dev

7. Test the API

You can now test the following endpoints:

    Register (POST /register)
        Body: { "email": "user@example.com", "password": "password", "name": "User" }
    Login (POST /login)
        Body: { "email": "user@example.com", "password": "password" }
    Get Users (GET /users)
        Add a valid JWT token in the Authorization header: Bearer <token>
    Update User (PUT /users/:id)
        Body: { "name": "New Name" }
    Delete User (DELETE /users/:id)

Conclusion

This is a simple Node.js app with JWT authentication, Prisma, PostgreSQL, and CRUD operations. You can expand it further by adding more models, features, and improving error handling as needed.
